from skimage.filters.rank import entropy
from skimage.morphology import disk
from scipy import ndimage as nd
from skimage.filters import sobel, gabor, hessian, prewitt

from multiprocessing import Process, Manager
from time import time
from tqdm import tqdm

def process_others(images, others_list, group_name):
    """Compute all filters except Hessian for each image in a group."""
    results = []
    for image in tqdm(images, desc=f"Processing {group_name} others"):
        filtered = {
            'Original': image,
            'Entropy': entropy(image, disk(2)),
            'Gaussian': nd.gaussian_filter(image, sigma=1),
            'Sobel': sobel(image),
            'Gabor': gabor(image, frequency=0.9)[1],
            'Prewitt': prewitt(image)
        }
        results.append(filtered)
    others_list.extend(results)

def process_all_others(
    yes_images, yes_others_list,
    no_images, no_others_list
):
    """
    Run process_others on both yes_images and no_images in a single process.
    Because 'others' is fast, we'll do them sequentially here.
    """
    process_others(yes_images, yes_others_list, "Yes")
    process_others(no_images, no_others_list, "No")

def process_hessian_sublist(images, start_idx, end_idx, hessian_list, group_name):
    """
    Compute the Hessian filter (across sigmas=1..99) on a sublist of images
    and store the results in hessian_list.
    """
    sub_images = images[start_idx:end_idx]
    results = []
    desc = f"{group_name} Hessian {start_idx}:{end_idx}"
    for image in tqdm(sub_images, desc=desc):
        hess_results = [hessian(image, sigmas=[s]) for s in range(1, 100)]
        results.append(hess_results)
    hessian_list.extend(results)

def manual_hessian_run(yes_images, no_images):
    """
    6 total processes:
      1) One process for ALL 'others' (both yes_images & no_images).
      2) Three processes for Hessian on yes_images (split into 3 sublists).
      3) Two processes for Hessian on no_images (split into 2 sublists).
    """
    start_time = time()

    manager = Manager()

    # Manager lists for "others"
    yes_others_list = manager.list()
    no_others_list = manager.list()

    # Manager lists for Hessian (weâ€™ll split the sublists)
    yes_hessian_list_1 = manager.list()
    yes_hessian_list_2 = manager.list()
    yes_hessian_list_3 = manager.list()

    no_hessian_list_1 = manager.list()
    no_hessian_list_2 = manager.list()

    # --- Create the sublist boundaries for Yes images (3 sublists) ---
    yes_len = len(yes_images)
    yes_third_1 = yes_len // 3
    yes_third_2 = (yes_len * 2) // 3

    # --- Create the sublist boundaries for No images (2 sublists) ---
    no_len = len(no_images)
    no_half = no_len // 2

    # --- Process 1: single process for ALL "others" ---
    p_others = Process(
        target=process_all_others,
        args=(yes_images, yes_others_list, no_images, no_others_list)
    )

    # --- Processes 2,3,4: Hessian for Yes (3 sublists) ---
    p_yes_hessian_1 = Process(
        target=process_hessian_sublist,
        args=(yes_images, 0, yes_third_1, yes_hessian_list_1, "Yes")
    )
    p_yes_hessian_2 = Process(
        target=process_hessian_sublist,
        args=(yes_images, yes_third_1, yes_third_2, yes_hessian_list_2, "Yes")
    )
    p_yes_hessian_3 = Process(
        target=process_hessian_sublist,
        args=(yes_images, yes_third_2, yes_len, yes_hessian_list_3, "Yes")
    )

    # --- Processes 5,6: Hessian for No (2 sublists) ---
    p_no_hessian_1 = Process(
        target=process_hessian_sublist,
        args=(no_images, 0, no_half, no_hessian_list_1, "No")
    )
    p_no_hessian_2 = Process(
        target=process_hessian_sublist,
        args=(no_images, no_half, no_len, no_hessian_list_2, "No")
    )

    # --- Start all 6 processes ---
    p_others.start()

    p_yes_hessian_1.start()
    p_yes_hessian_2.start()
    p_yes_hessian_3.start()

    p_no_hessian_1.start()
    p_no_hessian_2.start()

    # --- Join (wait for) them all ---
    p_others.join()

    p_yes_hessian_1.join()
    p_yes_hessian_2.join()
    p_yes_hessian_3.join()

    p_no_hessian_1.join()
    p_no_hessian_2.join()

    # --- Merge final results for "Yes" images ---
    # Combine the Hessian results from the 3 sublists in correct order
    yes_hessian_full = (
        list(yes_hessian_list_1) +
        list(yes_hessian_list_2) +
        list(yes_hessian_list_3)
    )

    yes_final = []
    for i in range(yes_len):
        combined = dict(yes_others_list[i])  # 'others' results
        combined['Hessian'] = yes_hessian_full[i]
        yes_final.append(combined)

    # --- Merge final results for "No" images ---
    no_hessian_full = (
        list(no_hessian_list_1) +
        list(no_hessian_list_2)
    )

    no_final = []
    for i in range(no_len):
        combined = dict(no_others_list[i])
        combined['Hessian'] = no_hessian_full[i]
        no_final.append(combined)

    end_time = time()
    execution_time = end_time - start_time
    print(f"Manual Split execution time: {execution_time:.2f} seconds")

    return execution_time, yes_final, no_final
